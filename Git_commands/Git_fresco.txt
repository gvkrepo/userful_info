Yes this is really helpful
##############Prodigious Git ###################

How to install Git ?
For linux
$sudo apt-get update
$sudo apt-get install git

$git config --global user.name "FirstName"
$git config --global user.email "myemail@domain.com"

$git log -2 				displays the history of last two commits
$git log commit_id 			shows the history starting from commit_id
$git log filename 			displays the list of commits for the file

$git log --oneline			Fits the log output to a single line
$git log --decorate			Adds a symbolic pointer to the output
$git log --graph 			Gives a graphical representation to the log output
$git log --grep=<pattern> 	Filters the log output and displays the output which 
							matches the specified pattern
$git show
$git show --oneline HEAD~2..HEAD

$git diff HEAD~1 HEAD

git log -p			 					Prints full details of each commit
git log --grep-reflog=<pattern>			Shows the list of commits when commit message matches regular expression pattern
git log –follow ./path/to/filename 		Shows the history for the current file
git show 								Outputs content changes of the specified commit
git diff --color-words	 				Output has only the color-coded words that have changed
git diff –staged	 					Shows the file differences between staging and the last committed version
git diff .path/to/file					Shows changes in a file compared to the previous commit

git clone https://github.com/facebook/react.git
git pull <remote_name> <branch_name>
git fetch <remote_name> <branch_name>
git merge <remote_name>/<branch_name>

git push <remote_name> <branch_name>
git remote add <remote_name> <remote_url>
git remote add origin https://github.com/play/repo.git


git checkout -b <branch-name>			Creating new branch
git push origin <branch-name>			Pushing branch from local to remote repo

Renaming branch:
git branch -m old-name new-name 		Renaming local branch 
git push origin :old-name new-name		Renaming remote branch

Deleting branch:
git branch -d <branch-name>				Deleting local branch
git push origin -d <branch-name>		Deleting remote branch:

git branch -a: Lists all the branches
git branch -d <branch-name>: Deletes the branch in local repo
git checkout -b: Creates a branch and switches to it
git checkout <branch-name>: Switches to the provided branch

git merge <branch>: Merges <branch> to current branch
git rebase <base>: Rebases the current branch onto the base (branch name, commit ID, tag)
git rebase -i <base>: Performs interactive rebase. Launches editor where you can specify command on each commit to transform it.
git rebase --abort: Cancels rebasing and goes back to the previous commit
git rebase --continue: Continues rebasing after resolving the rebase conflicts
git pull --rebase: Fetches the remote copy and rebases it into the current branch of the local copy

git commit --amend 			command is used to fix your previous commit where you do not want to add a new commit. 
git checkout filename
						This command will only discard the changes in the working area. 
						If you have already staged the changes,
						you need to use reset command (as discussed later)
						
					
					
					
					
git commit --amend 		command is used to fix your previous commit where you do not want to add
						a new commit.
						
git checkout filename	command will only discard the changes in the working area. 
						If you have already staged the changes, you need to use reset command	

git checkout commitSHA	

git reset filename		If you have staged your changes and forgot to add something, 
						you can reset the file, so the file is moved from staging to working 
						area where you can make the required changes.
						
--soft: This moves your commit changes into staging area and does not affect your current working area.
--hard: This deletes all the commit changes. Be cautious with this flag. You might lose your changes as this flag resets both staging area and working directory to match the <commit>.
--mixed: This is the default operating mode, where your commit changes are moved to working area.

git revert 				inverses the changes from that old commit and creates a new revert commit, 
						instead of deleting the old commit.
						



						
git rm
git clean
git rm 					is used to delete any tracked file from your repository.
						Files from both the staging area and the working directory can be 
						removed using the same.
git reset and git checkout 
						You can get back your deleted files.
git rev-list -n 1 HEAD -- filename 
git checkout deletingcommitid^ -- filename
git clean 				is undoable
git clean -n 			command to perform a dry run, 
						which helps to know the list of files to be removed.

						
git revert <commit> 	Creates a new commit that undoes all changes made in the 
						commit and applies it to the current branch

git reset <file>		Moves file changes from staging area to working directory.

git reset <commit>		Moves current branch's HEAD tip to the old <commit>.
						All the changes in the commits (that you skipped to move 
						to the old commit) are moved to the working area.

git commit --amend 		Adds staged changes to the last commit and allows for editing the old
						commit message

git rm --cached(file_name) 
						Untracks the current file

git checkout <commit>	Switches the HEAD to the provided commit


git cherry-pick commitSHA

git stash: Saves your current changes
git stash pop: Gets your changes from stashed list and applies in the working area

git stash: Saves all the modified files temporarily
git stash list: Lists all the stashed sets
git stash apply: Applies the latest stashed content
git stash pop: Applies the latest stashed set and drops it
git tag: Adds a tag to a commit
git tag -a -m: Adds an annotated tag with a message
git push tag name: Pushes tag to the remote repo

git submodule add https://github.com/doctrine/some-library.git


git submodule add <URL>: Adds a submodule to the project.
git submodule status: View status (working, staging, or indexed files) of all the submodules.
git submodule update: Updates submodules after switching branches.
git submodule update --init: After cloning a new repo, if you need to add submodules to it from .gitmodules file, use this command.
git submodule update --init --recursive: If the submodules inside a newly cloned repo are nested, then use this.
git submodule update --remote: Pulls all changes in the submodules.

git blame index.html
git blame <options> <filename>
-L to filter based on line numbers
-s to suppress the author's name and timestamp from the output
-e to show the author's email instead of the author's name
-f to show the filename in the original commit
-n to show the line number in the original commit

git bisect log
git bisect reset
git bisect start - To start Git Bisect
git bisect good - To declare that the commit is good
git bisect bad - To declare that the commit has an error
























#################################################
